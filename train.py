"""
Here, we will run everything that is related to the training procedure.
"""

import time
import torch
import torch.nn as nn

from tqdm import tqdm
from utils import train_utils
from torch.utils.data import DataLoader
from utils.types import Scores, Metrics
from utils.train_utils import TrainParams
from utils.train_logger import TrainLogger
import torch.optim as optim
import IPython.display
import numpy as np




def get_metrics(best_eval_score: float, eval_score: float, train_loss: float) -> Metrics:
    """
    Example of metrics dictionary to be reported to tensorboard. Change it to your metrics
    :param best_eval_score:
    :param eval_score:
    :param train_loss:
    :return:
    """
    return {'Metrics/BestAccuracy': best_eval_score,
            'Metrics/LastAccuracy': eval_score,
            'Metrics/LastLoss': train_loss}


def train(dis_model: nn.Module, gen_model: nn.Module, train_loader: DataLoader, train_params: TrainParams, logger: TrainLogger) -> Metrics:
    dsc_avg_losses, gen_avg_losses = [], []
    dsc_optimizer = torch.optim.Adam(dis_model.parameters(), lr=0.000008)
    gen_optimizer = torch.optim.Adam(gen_model.parameters(), lr=0.001)
    for epoch_idx in range(train_params.num_epochs):
        # We'll accumulate batch losses and show an average once per epoch.
        dsc_losses, gen_losses = [], []
        print(f'--- EPOCH {epoch_idx+1}/{train_params.num_epochs} ---')

        #with tqdm.tqdm(total=len(train_loader.batch_sampler), file=sys.stdout) as pbar:
        #for idx, (x_data, _) in tqdm(enumerate(train_loader)):
        for x_data in tqdm(train_loader):
            if torch.cuda.is_available():
                x_data = x_data.to("cuda")
            dsc_loss, gen_loss = train_batch(dis_model, gen_model, discriminator_loss_fn, generator_loss_fn, dsc_optimizer, gen_optimizer, x_data)
            dsc_losses.append(dsc_loss)
            gen_losses.append(gen_loss)

        dsc_avg_losses.append(np.mean(dsc_losses))
        gen_avg_losses.append(np.mean(gen_losses))
        print(f'Discriminator loss: {dsc_avg_losses[-1]}')
        print(f'Generator loss:     {gen_avg_losses[-1]}')
        
        if save_checkpoint(gen_model, dsc_avg_losses, gen_avg_losses, 'checkpoint'):
            print(f'Saved checkpoint.')
            

        samples = gen_model.sample(5, with_grad=False)
        fig, _ = plot.tensors_as_images(samples.cpu(), figsize=(6,2))
        IPython.display.display(fig)
        plt.close(fig)

    # Show hypers
    print(hp)

def discriminator_loss_fn(y_data, y_generated, data_label=0, label_noise=0.0):
    """
    Computes the combined loss of the discriminator given real and generated
    data using a binary cross-entropy metric.
    This is the loss used to update the Discriminator parameters.
    :param y_data: Discriminator class-scores of instances of data sampled
    from the dataset, shape (N,).
    :param y_generated: Discriminator class-scores of instances of data
    generated by the generator, shape (N,).
    :param data_label: 0 or 1, label of instances coming from the real dataset.
    :param label_noise: The range of the noise to add. For example, if
    data_label=0 and label_noise=0.2 then the labels of the real data will be
    uniformly sampled from the range [-0.1,+0.1].
    :return: The combined loss of both.
    """
    assert data_label == 1 or data_label == 0
    device = y_generated.device
    norm_label_noise = 0.5 * label_noise

    min_value, max_value =  [data_label-norm_label_noise, data_label+norm_label_noise]
    diff = max_value-min_value
    noisy_data_label = min_value + torch.rand(y_data.shape, device=device)*diff

    min_value, max_value =  [1-data_label-norm_label_noise, 1-data_label+norm_label_noise]
    diff = max_value - min_value
    generated_label = min_value + torch.rand(y_generated.shape, device=device)*diff
    
    loss_func = torch.nn.BCEWithLogitsLoss(reduction='mean')
    
    loss_data = loss_func(y_data, noisy_data_label)
    loss_generated = loss_func(y_generated, generated_label)
    return loss_data + loss_generated

def generator_loss_fn(y_generated, data_label=0):
    """
    Computes the loss of the generator given generated data using a
    binary cross-entropy metric.
    This is the loss used to update the Generator parameters.
    :param y_generated: Discriminator class-scores of instances of data
    generated by the generator, shape (N,).
    :param data_label: 0 or 1, label of instances coming from the real dataset.
    :return: The generator loss.
    """
    assert data_label == 1 or data_label == 0
    device = y_generated.device
    
    generated_labeles = torch.ones(y_generated.shape, device=device)
    generated_labeles = data_label * generated_labeles
    loss_func = torch.nn.BCEWithLogitsLoss()
    loss = loss_func(y_generated, generated_labeles)
    return loss

def create_optimizer(model_params, opt_params):
    opt_params = opt_params.copy()
    optimizer_type = opt_params['type']
    opt_params.pop('type')
    return optim.__dict__[optimizer_type](model_params, **opt_params)

def train_batch(
    dsc_model,
    gen_model,
    dsc_loss_fn,
    gen_loss_fn,
    dsc_optimizer,
    gen_optimizer,
    x_data,
):
    """
    Trains a GAN for over one batch, updating both the discriminator and
    generator.
    :return: The discriminator and generator losses.
    """

    dsc_optimizer.zero_grad()
    
    #real images
    y_data = dsc_model.forward(x_data)
    
    #generate data w/o grad
    generated_data = gen_model.sample(x_data.shape[0], with_grad=False)

    #fake images w/o grad
    y_generated = dsc_model.forward(generated_data.detach())

    #fix y shape
    y_data = y_data.view(-1)
    y_generated = y_generated.view(-1)
    
    dsc_loss = dsc_loss_fn(y_data, y_generated)
    dsc_loss.backward(retain_graph=True)
    dsc_optimizer.step()

    gen_optimizer.zero_grad()
    
    #generate data w/ grad
    generated_data_2 = gen_model.sample(x_data.shape[0], with_grad=True)

    #fake images w/ grad
    y_generated_2 = dsc_model(generated_data_2)

    #fix y shape
    y_generated = y_generated.view(-1)
    
    gen_loss = gen_loss_fn(y_generated_2.view(-1)) 
    gen_loss.backward()
    gen_optimizer.step()

    return dsc_loss.item(), gen_loss.item()

def save_checkpoint(gen_model, dsc_losses, gen_losses, checkpoint_file):
    """
    Saves a checkpoint of the generator, if necessary.
    :param gen_model: The Generator model to save.
    :param dsc_losses: Avg. discriminator loss per epoch.
    :param gen_losses: Avg. generator loss per epoch.
    :param checkpoint_file: Path without extension to save generator to.
    """

    saved = False
    checkpoint_file = f"{checkpoint_file}.pt"

    if len(gen_losses) < 11:
        return saved
    new_arr = []
    for i in range(len(gen_losses) - 10):
        new_arr.append(1/(abs(dsc_losses[i+10] - gen_losses[i+10])*(dsc_losses[i+10] + gen_losses[i+10])))
    tmp = max(new_arr)
    predicted_index = new_arr.index(tmp)
    if (predicted_index == len(gen_losses)-11):
        torch.save(gen_model, checkpoint_file)
        saved = True
    return saved

















    """
    Training procedure. Change each part if needed (optimizer, loss, etc.)
    :param model:
    :param train_loader:
    :param eval_loader:
    :param train_params:
    :param logger:
    :return:
    """
    """metrics = train_utils.get_zeroed_metrics_dict()
    best_eval_score = 0

    # Create optimizer
    optimizer = torch.optim.Adam(model.parameters(), lr=train_params.lr)

    # Create learning rate scheduler
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer,
                                                step_size=train_params.lr_step_size,
                                                gamma=train_params.lr_gamma)

    for epoch in tqdm(range(train_params.num_epochs)):
        t = time.time()
        metrics = train_utils.get_zeroed_metrics_dict()

        for i, (x, y) in enumerate(train_loader):
            if torch.cuda.is_available():
                x = x.cuda()
                y = y.cuda()

            y_hat = model(x)

            loss = nn.functional.binary_cross_entropy_with_logits(y_hat, y)

            # Optimization step
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            # Calculate metrics
            metrics['total_norm'] += nn.utils.clip_grad_norm_(model.parameters(), train_params.grad_clip)
            metrics['count_norm'] += 1

            # NOTE! This function compute scores correctly only for one hot encoding representation of the logits
            batch_score = train_utils.compute_score_with_logits(y_hat, y.data).sum()
            metrics['train_score'] += batch_score.item()

            metrics['train_loss'] += loss.item() * x.size(0)

            # Report model to tensorboard
            if epoch == 0 and i == 0:
                logger.report_graph(model, x)

        # Learning rate scheduler step
        scheduler.step()

        # Calculate metrics
        metrics['train_loss'] /= len(train_loader.dataset)

        metrics['train_score'] /= len(train_loader.dataset)
        metrics['train_score'] *= 100

        norm = metrics['total_norm'] / metrics['count_norm']

        model.train(False)
        metrics['eval_score'], metrics['eval_loss'] = evaluate(model, eval_loader)
        model.train(True)

        epoch_time = time.time() - t
        logger.write_epoch_statistics(epoch, epoch_time, metrics['train_loss'], norm,
                                      metrics['train_score'], metrics['eval_score'])

        scalars = {'Accuracy/Train': metrics['train_score'],
                   'Accuracy/Validation': metrics['train_loss'],
                   'Loss/Train': metrics['eval_score'],
                   'Loss/Validation': metrics['eval_loss']}

        logger.report_scalars(scalars, epoch)

        if metrics['eval_score'] > best_eval_score:
            best_eval_score = metrics['eval_score']
            if train_params.save_model:
                logger.save_model(model, epoch, optimizer)

    return get_metrics(best_eval_score, metrics['eval_score'], metrics['train_loss'])


@torch.no_grad()
def evaluate(model: nn.Module, dataloader: DataLoader) -> Scores:
    
    Evaluate a model without gradient calculation
    :param model: instance of a model
    :param dataloader: dataloader to evaluate the model on
    :return: tuple of (accuracy, loss) values
    
    score = 0
    loss = 0

    for i, (x, y) in tqdm(enumerate(dataloader)):
        if torch.cuda.is_available():
            x = x.cuda()
            y = y.cuda()

        y_hat = model(x)

        loss += nn.functional.binary_cross_entropy_with_logits(y_hat, y)
        score += train_utils.compute_score_with_logits(y_hat, y).sum().item()

    loss /= len(dataloader.dataset)
    score /= len(dataloader.dataset)
    score *= 100

    return score, loss"""

    """# maybe we should delete the below
    dsc_optimizer = create_optimizer(dsc.parameters(), hp['discriminator_optimizer'])
    gen_optimizer = create_optimizer(gen.parameters(), hp['generator_optimizer'])
    checkpoint_file = 'checkpoints/gan'
    checkpoint_file_final = f'{checkpoint_file}_final'
    if os.path.isfile(f'{checkpoint_file}.pt'):
        os.remove(f'{checkpoint_file}.pt')"""#




"""num_epochs = 100

if os.path.isfile(f'{checkpoint_file_final}.pt'):
    print(f'*** Loading final checkpoint file {checkpoint_file_final} instead of training')
    num_epochs = 0
    gen = torch.load(f'{checkpoint_file_final}.pt', map_location=device)
    checkpoint_file = checkpoint_file_final

dis_model: nn.Module, gen_model: nn.Module


try:"""
